---
import YukinaConfig from "../../yukina.config";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";

interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}
const { title, subTitle, bannerImage, slug } = Astro.props;

const hasTitle = title || subTitle;
const hasHeaderImg = bannerImage || slug;
const carouselImgsList = YukinaConfig.banners;
const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
---

<div id="banner" class="banner onload-animation-fade-in">
  <div class="transition-main banner-inner h-full w-full">
    {hasHeaderImg ? (
      <div class="cover">
        <img
            class="item lozad"
            data-src={bannerImage ?? GetCoverURLForUnspecifiedEntry(slug ?? "")}
          alt="PostCover"
          />
        </div>
    ) : (
      <div class="carousel">
        <ul id="carousel_imgs">
          {carouselImgsList.map((img, index) => (
            <li
              class="item lozad"
              style={{ animationDelay: `${index * 6}s` }}
              data-background-image={img}
        />
          ))}
        </ul>
  </div>
    )}
    <div class="relative h-[95%] w-full">
      <div class="absolute left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4">
        <div class="flex flex-col">
          <h1 class:list={[hasTitle ? "title-normal" : "title-index"]} class="title">
            {title ?? YukinaConfig.title}
          </h1>
          <h2 class="subtitle">{subTitle ?? YukinaConfig.subTitle}</h2>
</div>
      </div>
    </div>
  </div>
  <div class="waves" id="header-waves">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        />
      </defs>
      <g class="parallax">
        <use xlink:href="#gentle-wave" x="48" y="0" class="opacity-25" style="animation-delay: -2s; animation-duration: 7s" />
        <use xlink:href="#gentle-wave" x="48" y="3" class="opacity-50" style="animation-delay: -3s; animation-duration: 10s" />
        <use xlink:href="#gentle-wave" x="48" y="5" class="opacity-75" style="animation-delay: -4s; animation-duration: 13s" />
        <use xlink:href="#gentle-wave" x="48" y="7" style="animation-delay: -5s; animation-duration: 20s" />
      </g>
    </svg>
  </div>
</div>

<script is:inline>
  const carouselImgs = document.getElementById("carousel_imgs");
  if (carouselImgs?.children.length) {
      const banner = document.getElementById("banner");
      if (banner && !banner.querySelector("style")) {
        banner.insertAdjacentHTML("beforeend", `
          <style>
  @keyframes carousel-animation {
              0% { opacity: 0; transform: scale(1); }
              3% { opacity: 1; }
              8% { opacity: 1; animation-timing-function: ease-out; }
            ${100 / carouselImgs.children.length}% { opacity: 1; }
            ${100 / carouselImgs.children.length + 50 / carouselImgs.children.length}% { opacity: 0; animation-timing-function: ease-out; }
              100% { opacity: 0; transform: scale(2); }
    }
          </style>
        `);
    }
    }
</script>

<style define:vars={{ carouselAnimationTime }}>
  .banner {
    @apply relative h-[calc(var(--banner-height)*3/4)] opacity-100 lg:h-[var(--banner-height)];
  }
  .carousel, .cover {
    @apply absolute left-0 top-0 -z-10 h-[calc(var(--banner-height)*3/4)] w-full overflow-hidden bg-white lg:h-[var(--banner-height)];
  }
  .carousel::before, .cover::before {
    @apply absolute left-0 top-0 z-10 h-full w-full bg-black/25 dark:bg-black/30 content-[''];
  }
  .carousel .item {
    @apply h-full w-full origin-center bg-cover bg-center bg-no-repeat opacity-0;
    animation: carousel-animation var(--carouselAnimationTime) linear infinite;
    backface-visibility: hidden;
    transform-style: preserve-3d;
  }
  .cover .item {
    @apply h-full w-full object-cover;
  }
  .title {
    @apply mt-8 text-center font-bold text-[var(--title-color)] drop-shadow-lg lg:mt-1;
    font-family: var(--title-font);
  }
  .title-index {
    @apply mb-0 text-6xl leading-[5rem] lg:mb-1 lg:text-8xl;
  }
  .title-normal {
    @apply mb-1 text-3xl lg:text-5xl;
  }
  .subtitle {
    @apply text-center text-xl text-[var(--subtitle-color)] drop-shadow-md lg:text-3xl;
    font-family: var(--subtitle-font);
  }
  .waves {
    @apply absolute -bottom-[1px] h-[10vh] max-h-[9.375rem] min-h-[3.125rem] w-full md:h-[15vh];
  }
  .waves > .parallax use {
    @apply fill-[var(--background-color)];
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }
  @keyframes wave {
    0% { transform: translate3d(-90px, 0, 0); }
    100% { transform: translate3d(85px, 0, 0); }
    }
  @keyframes banner-onload-animation {
    0% { opacity: 0; height: calc(var(--banner-height) + 4rem); }
    100% { opacity: 1; height: var(--banner-height); }
    }
</style>
